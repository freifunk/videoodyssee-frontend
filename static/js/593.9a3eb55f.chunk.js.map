{"version":3,"file":"static/js/593.9a3eb55f.chunk.js","mappings":"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","sources":["content/applications/Form/index.js"],"sourcesContent":["import {\n    Grid,\n    Paper,\n    TextField,\n    Select,\n    MenuItem,\n    FormControl,\n    Autocomplete,\n    InputLabel,\n    Button,\n    Alert,\n    Snackbar,\n  \n  } from '@mui/material';\n  \n  import './styles.css'\n  import { useState , useEffect } from 'react';\n  \n  \n  const initialValues = {\n    title: \"\",\n    subtitle: \"\",\n    persons: [],\n    tags: [],\n    conference: \"\",\n    language: \"Russian\",\n    date: new Date().toISOString().split('T')[0],\n    url: \"\",\n    name: \"\",\n    email: \"\",\n    link: \"\",\n    description: \"\"\n  };\n  \n  \n  const Form = () => {\n  \n    const [values, setValues] = useState(initialValues);\n    const [err, setErr] = useState({ err: false, message: '' });\n    const [success, setSuccess] = useState({ success: false, message: '' });\n    const [conferences,setConferences] = useState([]);\n  \n  \n    const handleInputChange = (e) => {\n      const { name, value } = e.target;\n      setValues({\n        ...values,\n        [name]: value,\n      });\n    };\n  \n    const handleSubmit = async (event) => {\n      event.preventDefault();\n      try {\n        let res = await fetch(`${process.env.REACT_APP_API_URL}/video/`, {\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          method: \"POST\",\n          body: JSON.stringify(values),\n        });\n        let resJson = await res.json();\n        console.log(resJson);\n        if (res.status === 200) {\n\n          setSuccess({ success: true, message: resJson.data })\n        } else {\n          setErr({ err: true, message: resJson.message })\n        }\n      } catch (err) {\n        console.log(err);\n      }\n  \n    };\n\n    useEffect(() => {\n      const getConferences = async () => {\n        try {\n          let res = await fetch(`${process.env.REACT_APP_VOCTOWEB_API_URL}/public/conferences`, {\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n            }\n          })\n          let resJson = await res.json();\n          setConferences(resJson.conferences);\n          setValues({...values,conference:resJson.conferences[0].acronym});\n        }\n        catch (err) {\n          console.log(err);\n        }\n      }\n      getConferences();\n  \n    },[])\n  \n  \n    return (\n      <Grid>\n\n       \n        <Snackbar\n          open={success.success}\n          anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n          autoHideDuration={6000}\n          onClose={() => setSuccess({ success: false })}\n        >\n          <Alert onClose={() => setSuccess({ success: false })} severity=\"success\" sx={{ width: '100%' }}>\n            {success.message}\n          </Alert>\n        </Snackbar>\n  \n        <Snackbar\n          open={err.err}\n          anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n          autoHideDuration={6000}\n          onClose={() => setErr({ err: false })}\n        >\n          <Alert onClose={() => setErr({ err: false })} severity=\"error\" sx={{ width: '100%' }}>\n            {err.message}\n          </Alert>\n        </Snackbar>\n  \n        <Paper elevation={10} className=\"paper\">\n          <img src=\"/static/images/logo/logo-small.png\" alt='Friefunk logo'/>\n          <h2 align='center'>Video Upload </h2>\n          <p>\n            <FormControl fullWidth >\n              <TextField\n                value={values.title}\n                name=\"title\"\n                onChange={handleInputChange}\n                id=\"outlined-basic\"\n                label=\"Title\"\n                variant=\"outlined\"\n                size='small'\n                autoFocus\n              />\n            </FormControl>\n          </p>\n          <p>\n            <FormControl fullWidth >\n              <TextField\n                value={values.subtitle}\n                name=\"subtitle\"\n                onChange={handleInputChange}\n                id=\"outlined-basic\"\n                label=\"Subtitle\"\n                variant=\"outlined\"\n                size='small'\n              />\n  \n            </FormControl>\n          </p>\n  \n          <p>\n            <FormControl fullWidth >\n              <Autocomplete\n  \n                multiple\n                id=\"persons\"\n                onChange={handleInputChange}\n                options={[]}\n                freeSolo\n                size='small'\n                renderInput={(params) => <TextField {...params} label=\"Persons\" />}\n              />\n            </FormControl>\n          </p>\n  \n          <p>\n            <FormControl fullWidth >\n              <Autocomplete\n  \n                multiple\n                id=\"tags\"\n                onChange={handleInputChange}\n                options={[]}\n                freeSolo\n                size='small'\n                renderInput={(params) => <TextField {...params} label=\"Tags\" />}\n              />\n            </FormControl>\n          </p>\n  \n          <p>\n            <FormControl fullWidth >\n              <InputLabel id=\"event-select-label\">Conference</InputLabel>\n              <Select\n                labelId=\"event-select-label\"\n                id=\"conference\"\n                name=\"conference\"\n                value={values.conference}\n                onChange={handleInputChange}\n                label=\"Conference\"\n                size='small'\n              >\n                {/* <MenuItem value={'Wireless Meshup'}>Wireless Meshup</MenuItem>\n                <MenuItem value={'Wireless Community Weekend 2017'}>Wireless Community Weekend 2017</MenuItem>\n                <MenuItem value={'Friefunk Festival 2017'}>Friefunk Festival 2017</MenuItem> */}\n                {conferences.map(({ acronym, title }, index) => <MenuItem value={acronym}>{title}</MenuItem>)}\n              </Select>\n            </FormControl> \n          </p>\n  \n          <p>\n            <FormControl fullWidth >\n              <InputLabel id=\"lang-select-label\">Language</InputLabel>\n              <Select\n                labelId=\"lang-select-label\"\n                id=\"language\"\n                name=\"language\"\n                value={values.language}\n                onChange={handleInputChange}\n                label=\"Language\"\n                size='small'\n              >\n                <MenuItem value={'Russian'}>Russian</MenuItem>\n                <MenuItem value={'French'}>French</MenuItem>\n                <MenuItem value={'Spanish'}>Spanish</MenuItem>\n                <MenuItem value={'German'}>German</MenuItem>\n                <MenuItem value={'Japaneese'}>Japaneese</MenuItem>\n                <MenuItem value={'English'}>English</MenuItem>\n              </Select>\n            </FormControl>\n          </p>\n  \n          <p>\n            <FormControl fullWidth >\n              <TextField\n                value={values.date}\n                name=\"date\"\n                onChange={handleInputChange}\n                id=\"date\"\n                label=\"Date\"\n                type=\"date\"\n                size='small'\n  \n              />\n            </FormControl>\n  \n          </p>\n  \n          <p>\n            <FormControl fullWidth >\n              <TextField\n                value={values.url}\n                onChange={handleInputChange}\n                name=\"url\"\n                id=\"url\"\n                label=\"Video URL\"\n                type='url'\n                size='small'\n              />\n            </FormControl>\n          </p>\n  \n          <p>\n            <FormControl fullWidth >\n              <TextField\n                value={values.name}\n                onChange={handleInputChange}\n                name=\"name\"\n                id=\"name\"\n                label=\"Name\"\n                size='small'\n              />\n            </FormControl>\n          </p>\n  \n  \n          <p>\n            <FormControl fullWidth >\n              <TextField\n                value={values.email}\n                onChange={handleInputChange}\n                name=\"email\"\n                id=\"email\"\n                label=\"Email\"\n                type=\"email\"\n                size='small'\n              />\n            </FormControl>\n          </p>\n  \n          <p>\n            <FormControl fullWidth >\n              <TextField\n                value={values.link}\n                onChange={handleInputChange}\n                name=\"link\"\n                id=\"link\"\n                label=\"Link\"\n  \n                size='small'\n              />\n            </FormControl>\n          </p>\n  \n          <p>\n            <FormControl fullWidth >\n              <TextField\n                value={values.description}\n                onChange={handleInputChange}\n                name=\"description\"\n                id=\"description\"\n                label=\"Description\"\n                size='small'\n                multiline\n              />\n            </FormControl>\n          </p>\n          <FormControl fullWidth >\n            <Button variant=\"contained\" onClick={handleSubmit}>\n              Submit\n            </Button>\n          </FormControl>\n  \n        </Paper>\n  \n      </Grid>\n    )\n  }\n  \n  export default Form;\n  "],"names":["initialValues","title","subtitle","persons","tags","conference","language","date","Date","toISOString","split","url","name","email","link","description","useState","values","setValues","err","message","setErr","success","setSuccess","conferences","setConferences","handleInputChange","e","target","value","handleSubmit","event","preventDefault","fetch","process","headers","method","body","JSON","stringify","res","json","resJson","console","log","status","data","useEffect","getConferences","acronym","Grid","Snackbar","open","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","Alert","severity","sx","width","Paper","elevation","className","src","alt","align","FormControl","fullWidth","TextField","onChange","id","label","variant","size","autoFocus","Autocomplete","multiple","options","freeSolo","renderInput","params","InputLabel","Select","labelId","map","index","MenuItem","type","multiline","Button","onClick"],"sourceRoot":""}